The n-queens puzzle is the problem of placing n queens on a (n×n) chessboard such that no two queens can attack each other.
Given an integer n, find all distinct solutions to the n-queens puzzle. Each solution contains distinct board configurations of the n-queens placement, where the solutions are a permutation of [1,2,3..n] in increasing order, here the number in the ith place denotes that the ith-column queen is placed in the row with that number. For eg below figure represents a chessboard [3 1 4 2].



Examples:

Input: 1
Output: [1]
Explaination: Only one queen can be placed in the single cell available.
Input: 4
Output: [[2 4 1 3 ],[3 1 4 2 ]]
Explaination: These are the 2 possible solutions.
Expected Time Complexity: O(n!)
Expected Auxiliary Space: O(n2) 

Constraints:
1 ≤ n ≤ 10


//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
public:
void addsolve(vector<vector<int>>&board, vector<vector<int>>&ans, int n){
    vector<int> temp;
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            if (board[i][j] == 1) {
                temp.push_back(j + 1); // Store the column index (1-based).
                }
        }
    }
    ans.push_back(temp);
}
bool issafe(int row , int col , vector<vector<int>> &board , int n){
   // check for rows
    int x = row;
    int y = col;
    while(y>=0){
        if(board[x][y]==1)return false;
        y--;
    }
    // check for diagonals
    x = row;
    y = col;
    while(y>=0 && x>=0){
        if(board[x][y]==1)return false;
        y--;
        x--;
    }
    // for diagonals
     x = row;
     y = col;
    while(y>=0 && x<n){
        if(board[x][y]==1)return false;
        y--;
        x++;
    }
    return true;
}
void solve(int col , vector<vector<int>> &ans, vector<vector<int>> &board, int n){
    // base case
    if(col == n){
        addsolve(board , ans , n);
        return ;
    }
    // solve one case other recursion will be seen;
    for(int i=0; i<n; i++){
        if(issafe(i , col , board , n)){
            board[i][col]=1;
            solve(col+1, ans, board , n);
            // backtrack matlb vapas ate samy again use 0 mark krna pdega;
            board[i][col]=0;
        }
    }
}
    vector<vector<int>> nQueen(int n) {
        // creation matrix in which initionly store 0;
    vector<vector<int>> board(n , vector<int>(n , 0));
     // ans storage 
     vector<vector<int>> ans;
     //calling the solve function
     solve(0 , ans, board , n);
     
     sort(ans.begin(), ans.end());
     
     return ans;
    
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        
        Solution ob;
        vector<vector<int>> ans = ob.nQueen(n);
        if(ans.size() == 0)
            cout<<-1<<"\n";
        else {
            for(int i = 0;i < ans.size();i++){
                cout<<"[";
                for(int u: ans[i])
                    cout<<u<<" ";
                cout<<"] ";
            }
            cout<<endl;
        }
    
cout << "~" << "\n";
}
    return 0;
}
// } Driver Code Ends
